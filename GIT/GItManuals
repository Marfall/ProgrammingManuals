#Установка с терминала

sudo apt install git-all

#проверка версии GIT

git --version

#Добавить последнию версию с репозитория

sudo add-apt-repository ppa:git-core/ppa -y

sudo apt-get install git -y

git --version


git status - статус репозитория

git add -A   - сделать все файлы отслеживаемыми

git commit -a -m "first commit" - создать коммит (коментарий обязателен)

git checkout - Сбросить все изменения, которые вы только что сделали

git log - посмотреть коммиты

git remote add origin https://github.com/Marfall/JSProject.git    - связать локальный репозиторий с удаленным

git push -u origin master - запушить на удаленку  название - ветка 

-u означает, что по умолчанию все будет пушиться именно сюда


# Инициализация git-репозитория:

mkdir testProject	
cd testProject
git init

# Клонирование git-репозитория в папку на локальной машине:

Находясь в целевой папке:

git clone URL

git config --global user.name "user"
git config --global user.email "user@mail.ru"
git init
git status
git add .
git commit -m "commitname"
git log
git remote add nazvanie name`.git
git push navanie master
git pull nazvanie master


# GIT config

git config --list   - список парметров 

    - именно здесь прописывается имя и email, для того чтобы коммиты изменений 
      прописывались под вашим пользователем

git config --global user.name "Mafall"
git config --global user.email "marinefalling@gmail.com"


#GIT STATUS:

git status -  статус файлов

Файлы в GIT моут находиться в двух состояниях:

1) Tracked (отслеживаемые)

2) Untracked (неотслеживаемые)

    echo "information" > filename   -  создать файл filename с тектом information внутри  в текущей директории

GIT STATUS -S  - более короткая по информативости  версия команды

git add temp  - сделает файл temp - tracked - получит команду на отслеживание

    echo information >> temp   -  дописать информацию в файл temp

STAGING  - состояние, когда файл готов к тому, чтобы все изменений были записаны (commit)

MODIFIED - состояние, когда изменен, в коммит записан не будет - требуется ADD 


#GITIGNORE

    - как игнорировать изменения файлов

    TOUCH .GITIGNORE   - создать файл .gitignore

    - в нем добавляем имена файлов, которые не хотим чтобы видел GIT
    
    - нем можно делать коммены:

        #this is comment

    - можно указывать набор файлов:  

        *.txt   - все, которые заканчиваются на .txt   - он не будет отслежен

        qwe/*   - все файлы в папке qwe 

        qwe/*.txt  - все txt файлы в папке qwe

        qwe/**/*.txt  - во всех поддиректория папки qwe


#КОММИТ:

    GIT COMMIT 

    - открывается редактор - делаем изменения - это будет сообщение, с которым
      коммит будет сохранен.

    GIT COMIT -AM "some message"

    - параметр A сделает так, что все файлы сразу пойдут в стадию STAGING - автодобавление


#DIFFERENCE:

    GIT DIFF    - покажет где и какие изменения произошли

    GIT DIFF --CACHED   - инфа , которая пойдет в следующий коммит




#УДАЛЕНИЕ ФАЙЛОВ:

    rm filename - удаление файла в Linux

    GIT RM --CACHED FILENAME     - убирает из отслеживаемых файлов

    GIT RM -f FILENAME           - принудительно удаляет

#ПЕРЕМЕЩЕНИЕ И ПЕРЕИМЕНОВЫВАНИЕ:


    GIT MV FILENAME OLDNAME     - переименовать файл

        - автоматически переименуют добавит  в staging
 

#LOG 

    GIT LOG         - вывод логов, покажет коммиты, их время и автора

    GIT LOG -P      - посмотреть логи сразу с диффами 

    GIT LOG -2      - посмотреть количество последних коммитов 

    GIT LOG --stat  - статистика - какие файлы были добавлены, какие изменены и добавлены 

    GIT LOG --PRETTY=ONELINE/SHORT/SHORT/FULL/FULLER    - 1.все коммиты в одну строчку
                                                        - 2. краткое описание

    GIT LOG --SINCE=2.weeks / 20.minutes         - просмотреть за какое-то время

    GIT LOG --UNTIL=5.minutes                    - обратная SINCE

    GIT LOG FILENAME    - логи по конкретному файлу 

    GIT LOG --AUTHOR   - по автору

    GIT LOG --grep     - для линуксоидов

    GIT LOG -S "somedata"        - S-большое -  по somedata найдет коммит , в котором это добавлялось(внутри)



# ИЗМЕНЕНИЕ ПОСЛЕДНЕГО КОММИТА:

    GIT LOG -1      - последний коммит

    GIT COMMIT --AMEND      - открывается текстовый редактор с предыдущим коммитом



# UNSTAGE И ОТКАТ ИЗМЕНЕНИЙ:

    GIT RESET HEAD FILENAME     - изменения остаются, но он не в STAGING

    GIT CHECKOUT --FILENAME     - откатить изменения в файле до предыдущего коммита



# REMOTE REPOSITORY:


    GIT INIT    - создать локальный репозиторий

    GIT CLONE URL   - склонировть с удаленного репозитория

    MKDIR  DIRECTORY_NAME   - создать папку в Linux

    GIT REMOTE  - посмотреть список удаленный репозиториев

    GIT REMOTE ADD ORIGIN URL - добавить удаленный репозиторий

    GIT REMOTE -V   - покажет список репозиториев вместе с урлами и откуда  fetch и push

    GIT FETCH   - достает все данные c удаленного репозитория

    MERGE - сверка данных на локальной машине с удаленным репозиторием

    Все происходит в два этапа - начала FETCH, потом MERGE

    GIT PULL    - делает сразу две вещи FETCH + MERGE


    GIT PULL ORIGIN BRANCH (git pull origin master) - спулить

    GIT PUSH ORIGIN MASTER    - закинуть все на удаленный репозиторий

        - не прокатит, если изменения не последние - сначала нужно FETCH

    GIT REMOTE SHOW ORIGIN  - более подробная инфа о remote - вот ваще полезная вещь

    GIT REMOTE RENAME ORIGIN NEWNAME  - переименовать удаленную ветку с origin на NEWNAME

    GIT REMOTE RM branchname    - удалить ветку (файлы остались, удаленный branch ушел)


# TAGS:

    - Иногда есть необходимость ставить на коммиты тэги, например, на релизы

    GIT TAG - посмотреть все тэги

    - Тэги бывают двух видов:

        - Lightweight   - добавляется имя к коммиту

        - Annotated     - создается объект, хранящий кто-когда чего сделали

    GIT TAG V1.0  - создать lightweight тэг

    GIT TAG -A V1.2 -M "VERSION 1.2"    - создать Annotated-тэг

    GIT TAG -l "v1.*" - поиск по тэгам

    GIT SHOW V1.0   - информация о текущем тэге  

    GIT TAG v1.5 d5584 - повесить тэг на другой коммит -первые 5 цифр SHA-суммы

    GIT PUSH origin --TAGS  - запушить все тэги


# ALIAS: 

    - Псевдононимы 

    GIT CONFIG --LIST   - список всех конфигов, есть конфига , которые начинаются с alias:
                          alias.s = status 
    
    GIT D = GIT DIFF 

    - ALIAS можно добавлять самостоятельно:

    GIT CONFIG --GLOBAL ALIAS.LIST "CONFIG --LIST"
    
    - Теперь вместо GIT CONFIG --LIST  можно писать просто GIT LIST,
      в конфигурацию добавится:

    ALIAS.LIST=CONFIG --LIST

    GIT CONFIG --GLOBAL --UNSET alias.list   - снять alias - имя команды



# BRANCH

    - Отдельная ветка, не влияющая на основной BRANCH

    GIT BRANCH  - поазывает список branch-ей, которые у нас есть

        - GIT сохраняет снапшоты и branch - это просто ссылка - работает очень быстро

    GIT BRANCH newName   - создать ветку

    GIT BRANCH -v   - более подробная инфа о бранчах -  куда они указывают

    HEAD - указатель на текущий бранчах

    GIT CHECKOUT branchName - переключение на другую ветку

    GIT CHECKOUT -b someOtherBranch - создает и переходит на новый branch

    - до коммита новый файл не принадлежит ни к какому branch-у! (при чекауте пропадать не будет)

    GIT BRANCH -d someBranch    - удаление бранча ( -D   - force delete)



# MERGE 

    -  GIT CHECKOUT MASTER   - переключаемся на мастер
        
        - И теперь хотим смержить два бранча в один:

    -  GIT MERGE TEST 

        - мы находимся в мастере и получили изменения из TEST.

    

# РЕШЕНИЕ КОНФЛИКТОВ ПРИ MERGE:

    - Если два брэнча меня ли один и тот же файл:

    GIT MERGETOOL - утилита для решения конфликтов 

    GIT BRANCH --MERGE   -  посмотреть брэнчи где конфликтов нет

    GIT BRANCH --NO-MERGE   - посмотреть брэнчи с конфликтами

    - Удалить бранчи с конфликтами нельзя(только с -D )



# УДАЛЕННЫЕ БРАНЧИ:

    GIT LS-REMOTE origin - просмотреть удаленный репозиторий origin     

    GIT REMOTE SHOW origin  - показать инфомацию об origin

    GIT BRANCH -vv      - покажет какие локальные бранчи связаны с какими удаленными

    GIT CHECKOUT -b branchname     - создаст и перейдет на новый локальный брэнч (не связан с remote)



    -Можно самому создать удаленный branch:


    GIT PUSH origin branchname  - создать удаленный брэнч на основании текущего локального

    GIT PUSH origin branchname:anothername  - создать удаленный брэнч на основании текущего локального 
                                            с другим именем (ни к чему не привязан)

    - TRACKED BRANCH - локальный брэнч, который соответствует удаленному

    GIT CHECKOUT -b qwe origin/testbr    - qwe указывает на testbtr

    GIT CHECKOUT --TRACK origin/testbr - то же самое с одим именем

    GIT BRANCH -d testbr   - удалить брэнч (из другого брэнча)

    
    GIT CHECKOUT testbr - создаст локальный брэнч на основе удаленного 

    GIT BRANCH  -u origin/test  - связать текущий брэнч с удаленным

    GIT FETCH --all     - достать из всех удаленных брэнчей

    GIT REMOTE UPDATE   - то же самое

    GIT PUSH origin --delete branchname     - удалить remote брэнч






    

































