#Установка с терминала

sudo apt install git-all

#проверка версии GIT

git --version

#Добавить последнию версию с репозитория

sudo add-apt-repository ppa:git-core/ppa -y

sudo apt-get install git -y

git --version


git status - статус репозитория

git add -A   - сделать все файлы отслеживаемыми

git commit -a -m "first commit" - создать коммит (коментарий обязателен)

git checkout - Сбросить все изменения, которые вы только что сделали

git log - посмотреть коммиты

git remote add origin https://github.com/Marfall/JSProject.git    - связать локальный репозиторий с удаленным

git push -u origin master - запушить на удаленку  название - ветка 

-u означает, что по умолчанию все будет пушиться именно сюда


# Инициализация git-репозитория:

mkdir testProject	
cd testProject
git init

# Клонирование git-репозитория в папку на локальной машине:

Находясь в целевой папке:

git clone URL

git config --global user.name "user"
git config --global user.email "user@mail.ru"
git init
git status
git add .
git commit -m "commitname"
git log
git remote add nazvanie name`.git
git push navanie master
git pull nazvanie master


# GIT config

git config --list   - список парметров 

    - именно здесь прописывается имя и email, для того чтобы коммиты изменений 
      прописывались под вашим пользователем

git config --global user.name "Mafall"
git config --global user.email "marinefalling@gmail.com"


#GIT STATUS:

git status -  статус файлов

Файлы в GIT моут находиться в двух состояниях:

1) Tracked (отслеживаемые)

2) Untracked (неотслеживаемые)

    echo "information" > filename   -  создать файл filename с тектом information внутри  в текущей директории

GIT STATUS -S  - более короткая по информативости  версия команды

git add temp  - сделает файл temp - tracked - получит команду на отслеживание

    echo information >> temp   -  дописать информацию в файл temp

STAGING  - состояние, когда файл готов к тому, чтобы все изменений были записаны (commit)

MODIFIED - состояние, когда изменен, в коммит записан не будет - требуется ADD 


#GITIGNORE

    - как игнорировать изменения файлов

    TOUCH .GITIGNORE   - создать файл .gitignore

    - в нем добавляем имена файлов, которые не хотим чтобы видел GIT
    
    - нем можно делать коммены:

        #this is comment

    - можно указывать набор файлов:  

        *.txt   - все, которые заканчиваются на .txt   - он не будет отслежен

        qwe/*   - все файлы в папке qwe 

        qwe/*.txt  - все txt файлы в папке qwe

        qwe/**/*.txt  - во всех поддиректория папки qwe


#КОММИТ:

    GIT COMMIT 

    - открывается редактор - делаем изменения - это будет сообщение, с которым
      коммит будет сохранен.

    GIT COMIT -AM "some message"

    - параметр A сделает такб что все файлы сразу пойдут в стадию STAGING - автодобавление

    



















